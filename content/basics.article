Пакети, променљиве и функције.
Научите основне делове сваког Го програма.

Аутори Го језика
http://golang.org

* Пакети

Сваки Го програм се састоји из пакета.

Програми крећу са извршавањем у пакету `main`.

Овај програм користи пакете са увозним путањама `„fmt“` и `„math/rand“`.

По правилу, име пакета је исто као и последњи члан увозне путање. На пример, пакет `„math/rand“` се састоји од датотека које почињу са изјавом   `package`rand`.

#appengine: *Напомена:* окружење у којем се програми извршавају је
#appengine: предвидљиво те `rand.Intn` увек враћа исти број.
#appengine:
#appengine: (Да бисте видели другачији број, засејте генератор бројева. Погледајте [[http://golang.org/pkg/math/rand/#Seed][`rand.Seed`]] пакет.)

.play basics/packages.go

* Увоз

Овај код групише увозе између заграда, у такозвану „збирну“ увозну изјаву.

Можете писати вишеструке изјаве увоза и као:

	import "fmt"
	import "math"

али је пожељно користити „збирну“ увозну изјаву.

.play basics/imports.go

* Извезена имена

Након увоза пакета, можете га користити преко имена које он извози.

У гоу је име извезено уколико почиње са великим почетним словом.

`Foo` је извезено име, као и `FOO`. Име `foo` није извезено.

Извршите код. Онда промените `math.pi` у `math.Pi` и покушајте поново.

.play basics/exported-names.go

* Функције

Функција може имати нула или више аргумената.

У овом примеру, `add` узима два параметра врсте `int`.

Видите како се врста наводи _после_ имена променљиве.

(За објашњење због чега навођење врсте променљиве изгледа овако како изгледа, погледајте [[http://golang.org/doc/articles/gos_declaration_syntax.html][чланак о синтакси декларисања у Го језику]].)

.play basics/functions.go

* Функције - наставак

Када два или више параметра функције имају исту врсту, можете да изоставите навођење врсте за све осим за последњи параметар.

У овом примеру смо скратили

	x int, y int

на

	x, y int

.play basics/functions-continued.go

* Вишеструки резултати

Функција може вратити били који број резултата.

Функција `swap` враћа две ниске.

.play basics/multiple-results.go

* Именоване повратне вредности

Повратне вредности у Гоу могу бити именоване и могу да се користе као да су променљиве.

Ова имена треба да се користе за документовање значења повратних вредности.

Изјава `return` без аргумената враћа тренутне вредности резултата. Овај начин писања кода је познат као „гола“ повратна вредност.

Голе повратне вредности се требају користити само у кратким функцијама, као што је то показано у овом примеру. Голе повратне вредности могу отежати читање и разумевање кода у дужим функцијама.

.play basics/named-results.go

* Променљиве

Изјава `var` декларише списак променљивих. Као и код списка аргумената у функцији, врста променљивих се наводи на крају.

Изјава `var` може бити коришћена у нивоу пакета или унутар функције. Видимо оба начина употребе у овом примеру.

.play basics/variables.go

* Променљиве са почетним вредностима

Декларација променљиве може имати и почетну вредност, једна вредност по променљивој.

Уколико је почетна вредност наведена, врста може бити изузета из изјаве. Променљива ће добити врсту на основу почетне вредности.

.play basics/variables-with-initializers.go

* Кратко декларисање променљивих

Унутар функције, изјава навођења `:=` се може користити уместо `var` декларације са јасно наведеном врстом променљиве.

Ван функције, свака изјава мора почињати са речју (`var`, `func`, итд.) тако да конструкт `:=` није доступан.

.play basics/short-variable-declarations.go

* Основне врсте

Основне врсте у Гоу су

	bool // истинитост

	string // ниска

	int  int8  int16  int32  int64
	uint uint8 uint16 uint32 uint64 uintptr // бројеви

	byte // синоним за uint8

	rune // синоним за int32
	     // преставља Уникод кодну тачку

	float32 float64 // бројеви са остатком

	complex64 complex128 // велики бројеви

Овај пример показује променљиве више врста,
и показује да се декларације променљивих могу „збројити“ у блокове,
као што је то случај са збирним увозним изјавама.

.play basics/basic-types.go

* Нулте вредности

Променљиве наведене без почетне вредности добијају своју
_нулту_вредност_.

Нулта вредност је:

- `0` за бројеве,
- `false` за истинитост,
- `""` (празна реч) за ниске.

.play basics/zero.go

* Претварања променљивих из једне врсте у другу

Израз `T(v)` претвара вредност `v` у врсту `T`.

Пар примера бројевних претварања:

	var i int = 42
	var f float64 = float64(i)
	var u uint = uint(f)

Или, једноставније:

	i := 42
	f := float64(i)
	u := uint(f)

За разлику од Цеа (енгл.: „C“), у Гоу је потребно експлицитно (тачно наведено) претварање
између ставки различитих врста.
Испробајте. Уклоните `float64` или `int` претварања у примеру и видите шта ће се десити.

.play basics/type-conversions.go

* Извођење врсте

Када се променљива наведе без навођења врсте (када се користи `var` без навођења врсте или када се користи синтакса `:=`),
врста променљиве се _изводи_ из вредности са десне стране израза.

Када је на десној страни декларације променљивој наведена врста, нова променљива ће бити исте врсте:

	var i int
	j := i // j is an int

Али када се на десној страни налази бројевна константа ненаведене врсте, нова променљива може постати `int`, `float64`, or `complex128`
зависно од прецизности константе:

	i := 42           // int
	f := 3.142        // float64
	g := 0.867 + 0.5i // complex128

Пробајте да промените почетну вредност `v` у примеру и погледајте како се врста мења у складу са вредношћу.

.play basics/type-inference.go

* Константе

Константе се декларишу слично као и променљиве. За декларисање се користи реч `const`.

Константа може бити слово, реч, исказ истинитости или бројевна вредност.

Константе се не могу декларисати користећи `:=` синтаксу.

.play basics/constants.go

* Нумеричке константе

Нумеричке константе су веома прецизне _вредности_.

Константа без врсте узима врсту на основу своје вредности.

Пробајте да такође одштампате `needInt(Big)`.

.play basics/numeric-constants.go

* Честитамо!

Завршили сте ову лекцију!

Можете се вратити на списак [[/list][модула]] да бисте видели шта можете да научите следеће или можете
наставити на [[javascript:click('.next-page')][следећу лекцију]].
